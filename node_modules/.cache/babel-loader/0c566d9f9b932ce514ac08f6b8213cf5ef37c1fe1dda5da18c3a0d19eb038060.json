{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\z-min\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\start project\\\\src\\\\Store\\\\CartContextProvider.jsx\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./Cart-context\";\n\n//Здесь определено начальное состояние корзины \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\n/*Эта функция принимает текущее состояние state и действие action в качестве аргументов.\r\n\r\nВ данном случае, если действие (action.type) равно 'ADD_ITEM', то происходит добавление элемента в корзину. Мы создаем новый массив updatedItems, добавляя к нему новый элемент action.item, и обновляете totalAmount, учитывая стоимость нового элемента. Затем возвращается новое состояние корзины.\r\nЕсли действие не соответствует 'ADD_ITEM', то возвращается начальное состояние defaultCartState. */\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_ITEM') {\n    //state.items это - текущий массив методом concat добавляем новый элемент (action.item)\n\n    const updatedItems = state.items.concat(action.item);\n    //state.totalAmount -  общая сумма стоимости элементов.К нему добавляем стоимость нового элемента, умноженную на его количество (action.item.price * action.item.amount). В результате, мы возвращаем новый объект состояния корзины, содержащий обновленный массив элементов и обновленную сумму.\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    //Если действие не соответствует 'ADD_ITEM', то мы просто возвращаем начальное состояние defaultCartState.\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\n\n//Цель этого компонента управлять данными корзины\nconst CartContextProvider = props => {\n  _s();\n  //В компоненте CartContextProvider мы используем хук useReducer для создания состояния корзины cartState и функции dispatchCartAction. Эта функция служит для отправки действий редуктору.\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  //Здесь мы определяем функцию addItemHandler которые используют dispatchCartAction для отправки действий \n  //У нас есть две функции: addItemHandler и removeItemHandler. addItemHandler вызывает dispatchCartAction с действием 'ADD_ITEM', и передает информацию о товаре (item), который мы хотим добавить в корзину. Таким образом, когда вызывается addItemHandler, происходит добавление элемента в корзину, а редуктор cartReducer обновляет состояние.\n  const addItemHandler = item => {\n    dispatchCartAction({\n      type: 'ADD_ITEM',\n      item: item\n    });\n  };\n\n  //Здесь мы определяем функцию removeItemHandler которые используют dispatchCartAction для отправки действий \n  const removeItemHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE_ITEM',\n      item: id\n    });\n  };\n  //Мы создаете объект cartContext, который содержит текущие элементы корзины (items и totalAmount) и функции для добавления и удаления элементов.\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n_s(CartContextProvider, \"irLoCnUjZMazMtjqft6WkB530Qg=\");\n_c = CartContextProvider;\nexport default CartContextProvider;\n\n// Мы создаем начальное состояние корзины (defaultCartState), которое представляет собой объект, содержащий начальные значения для items и totalAmount.\n\n// С использованием хука useReducer, мы создаем состояние корзины и функцию dispatchCartAction, которая позволяет нам отправлять действия для изменения состояния. мы передаем два аргумента в useReducer:\n\n// cartReducer: Это функция-редуктор, которая будет обрабатывать действия и обновлять состояние на основе этих действий.\n// defaultCartState: Это начальное состояние корзины, которое будет использоваться при инициализации.\n// cartState - это переменная, в которой содержится текущее состояние корзины. мы можем читать данные из cartState для отображения информации о корзине в вашем приложении.\n\n// dispatchCartAction - это функция, которую вы используете для отправки действий в редуктор. Действия представлены объектами с типом (type) и, возможно, дополнительными данными (item в вашем случае). Эти действия обрабатываются в cartReducer, который изменяет состояние корзины на основе действий.\n\n// cartReducer - это функция, которая принимает текущее состояние (state) и действие (action). В зависимости от типа действия, она выполняет изменения в состоянии и возвращает новое состояние. Это позволяет вам управлять состоянием корзины, добавлять элементы, удалять элементы и т. д., согласно логике, определенной в редукторе.\nvar _c;\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"names":["useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartContextProvider","props","_s","cartState","dispatchCartAction","addItemHandler","removeItemHandler","id","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/z-min/OneDrive/Рабочий стол/start project/src/Store/CartContextProvider.jsx"],"sourcesContent":["import { useReducer } from \"react\"\r\n\r\nimport CartContext from \"./Cart-context\"\r\n\r\n//Здесь определено начальное состояние корзины \r\nconst defaultCartState = {\r\n    items:[],\r\n    totalAmount:0,\r\n\r\n}\r\n\r\n\r\n/*Эта функция принимает текущее состояние state и действие action в качестве аргументов.\r\n\r\nВ данном случае, если действие (action.type) равно 'ADD_ITEM', то происходит добавление элемента в корзину. Мы создаем новый массив updatedItems, добавляя к нему новый элемент action.item, и обновляете totalAmount, учитывая стоимость нового элемента. Затем возвращается новое состояние корзины.\r\nЕсли действие не соответствует 'ADD_ITEM', то возвращается начальное состояние defaultCartState. */\r\nconst cartReducer = (state , action) => {\r\n    if(action.type === 'ADD_ITEM'){\r\n                            //state.items это - текущий массив методом concat добавляем новый элемент (action.item)\r\n\r\n     \r\n        const updatedItems = state.items.concat(action.item)\r\n                            //state.totalAmount -  общая сумма стоимости элементов.К нему добавляем стоимость нового элемента, умноженную на его количество (action.item.price * action.item.amount). В результате, мы возвращаем новый объект состояния корзины, содержащий обновленный массив элементов и обновленную сумму.\r\n        const updatedTotalAmount = state.totalAmount + (action.item.price * action.item.amount)\r\n        //Если действие не соответствует 'ADD_ITEM', то мы просто возвращаем начальное состояние defaultCartState.\r\n        return {\r\n            items:updatedItems,\r\n            totalAmount:updatedTotalAmount\r\n        }\r\n    }\r\n    return defaultCartState\r\n}\r\n\r\n//Цель этого компонента управлять данными корзины\r\nconst CartContextProvider = (props) => {\r\n    //В компоненте CartContextProvider мы используем хук useReducer для создания состояния корзины cartState и функции dispatchCartAction. Эта функция служит для отправки действий редуктору.\r\n   const [cartState , dispatchCartAction] = useReducer(cartReducer , defaultCartState)\r\n\r\n\r\n   //Здесь мы определяем функцию addItemHandler которые используют dispatchCartAction для отправки действий \r\n   //У нас есть две функции: addItemHandler и removeItemHandler. addItemHandler вызывает dispatchCartAction с действием 'ADD_ITEM', и передает информацию о товаре (item), который мы хотим добавить в корзину. Таким образом, когда вызывается addItemHandler, происходит добавление элемента в корзину, а редуктор cartReducer обновляет состояние.\r\n    const addItemHandler = (item) => {\r\n        dispatchCartAction({\r\n            type:'ADD_ITEM',\r\n            item:item\r\n        })\r\n    }\r\n\r\n    //Здесь мы определяем функцию removeItemHandler которые используют dispatchCartAction для отправки действий \r\n    const removeItemHandler = (id) => {\r\n        dispatchCartAction({\r\n            type:'REMOVE_ITEM',\r\n            item:id\r\n        })\r\n    }\r\n//Мы создаете объект cartContext, который содержит текущие элементы корзины (items и totalAmount) и функции для добавления и удаления элементов.\r\n    const cartContext = {\r\n        items:cartState.items,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem:addItemHandler,\r\n        removeItem:removeItemHandler\r\n    }\r\n    return <CartContext.Provider value = {cartContext}>{props.children}</CartContext.Provider>\r\n}\r\n\r\nexport default CartContextProvider;\r\n\r\n\r\n\r\n\r\n\r\n// Мы создаем начальное состояние корзины (defaultCartState), которое представляет собой объект, содержащий начальные значения для items и totalAmount.\r\n\r\n// С использованием хука useReducer, мы создаем состояние корзины и функцию dispatchCartAction, которая позволяет нам отправлять действия для изменения состояния. мы передаем два аргумента в useReducer:\r\n\r\n// cartReducer: Это функция-редуктор, которая будет обрабатывать действия и обновлять состояние на основе этих действий.\r\n// defaultCartState: Это начальное состояние корзины, которое будет использоваться при инициализации.\r\n// cartState - это переменная, в которой содержится текущее состояние корзины. мы можем читать данные из cartState для отображения информации о корзине в вашем приложении.\r\n\r\n// dispatchCartAction - это функция, которую вы используете для отправки действий в редуктор. Действия представлены объектами с типом (type) и, возможно, дополнительными данными (item в вашем случае). Эти действия обрабатываются в cartReducer, который изменяет состояние корзины на основе действий.\r\n\r\n// cartReducer - это функция, которая принимает текущее состояние (state) и действие (action). В зависимости от типа действия, она выполняет изменения в состоянии и возвращает новое состояние. Это позволяет вам управлять состоянием корзины, добавлять элементы, удалять элементы и т. д., согласно логике, определенной в редукторе."],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAC,EAAE;EACRC,WAAW,EAAC;AAEhB,CAAC;;AAGD;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAGC,MAAM,KAAK;EACpC,IAAGA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAC;IACN;;IAGpB,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAK,CAACO,MAAM,CAACH,MAAM,CAACI,IAAI,CAAC;IAChC;IACpB,MAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAW,GAAIG,MAAM,CAACI,IAAI,CAACE,KAAK,GAAGN,MAAM,CAACI,IAAI,CAACG,MAAO;IACvF;IACA,OAAO;MACHX,KAAK,EAACM,YAAY;MAClBL,WAAW,EAACQ;IAChB,CAAC;EACL;EACA,OAAOV,gBAAgB;AAC3B,CAAC;;AAED;AACA,MAAMa,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACnC;EACD,MAAM,CAACC,SAAS,EAAGC,kBAAkB,CAAC,GAAGrB,UAAU,CAACO,WAAW,EAAGH,gBAAgB,CAAC;;EAGnF;EACA;EACC,MAAMkB,cAAc,GAAIT,IAAI,IAAK;IAC7BQ,kBAAkB,CAAC;MACfX,IAAI,EAAC,UAAU;MACfG,IAAI,EAACA;IACT,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMU,iBAAiB,GAAIC,EAAE,IAAK;IAC9BH,kBAAkB,CAAC;MACfX,IAAI,EAAC,aAAa;MAClBG,IAAI,EAACW;IACT,CAAC,CAAC;EACN,CAAC;EACL;EACI,MAAMC,WAAW,GAAG;IAChBpB,KAAK,EAACe,SAAS,CAACf,KAAK;IACrBC,WAAW,EAACc,SAAS,CAACd,WAAW;IACjCoB,OAAO,EAACJ,cAAc;IACtBK,UAAU,EAACJ;EACf,CAAC;EACD,oBAAOpB,OAAA,CAACF,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAIJ,WAAY;IAAAK,QAAA,EAAEZ,KAAK,CAACY;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9F,CAAC;AAAAf,EAAA,CA7BKF,mBAAmB;AAAAkB,EAAA,GAAnBlB,mBAAmB;AA+BzB,eAAeA,mBAAmB;;AAMlC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}